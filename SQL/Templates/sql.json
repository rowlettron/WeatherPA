{
    // Place your snippets for sql here. Each snippet is defined under a snippet name and has a prefix, body and 
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
    // same ids are connected.
    // Example:
    // "Print to console": {
    //  "prefix": "log",
    //  "body": [
    //      "console.log('$1');",
    //      "$2"
    //  ],
    //  "description": "Log output to console"
    // }

    "Update Subscription Email Address":{
        "prefix": "sqlUpdateSubscriptionEmail",
        "body": ["USE ScreeningReports",
                "GO",   
                
                "/**************************************************************", 
                "Launch: 2107M-LC", 
                "", 
                "PMC: <PMCID>", 
                "**************************************************************/", 
                "",
                "DECLARE @RptID INT,",
                "        @PMCID INT = <PMCID>,", 
                "        @EmailChange NVARCHAR(500) = NULL", 
                "", 
                "SELECT 'Before: ', r.ReportName, s.* ", 
                "FROM dbo.RptSubscription_Subscriptions s ", 
                "INNER JOIN ScreeningReports.dbo.RptSubscription_ReportName r ON r.RptID = s.RptID", 
                "WHERE PMCID = @PMCID", 
                "ORDER BY SubscrID ", 
                "", 
                "UPDATE dbo.RptSubscription_Subscriptions", 
                "SET ${1|EmailTo, EmailCC|} = @EmailChange", 
                "where PMCID = @PMCID", 
                "", 
                "SELECT 'After: ', r.ReportName, s.*", 
                "FROM dbo.RptSubscription_Subscriptions s ", 
                "INNER JOIN ScreeningReports.dbo.RptSubscription_ReportName r ON r.RptID = s.RptID", 
                "WHERE PMCID = @PMCID ", 
                "ORDER BY SubscrID", 
                "go",
                ""], 

                "description": "Used to update email addresses on subscriptions"
    },

    "Insert New Subscriptions":{
        "prefix": "sqlInsertNewSubscription",
        "body":["USE ScreeningReports",
                 "GO",

                 "/**************************************************************************************",
                 " Launch: 2107M-LC", 
                 "", 
                 " PMC: <PMCID>", 
                 " <Requirements>",
                 " **************************************************************************************/",
                 "",
                 "DECLARE @RptID INT,",
                 "        @SubscrType VARCHAR(500) = '${1|Daily,Weekly,Monthly,Quarterly|}', ",
                 "        @PMCID INT = <PMCID>, ", 
                 "        @EmailTo NVARCHAR(500) = '<EmailTo address>', ",      
                 "        @EmailCC NVARCHAR(500) = '<EmailCC address>', ", 
                 "        @EmailBCC NVARCHAR(500) = 'Leasingdesk.Screening@RealPage.com', ",
                 "        @Subject NVARCHAR(1000) = '<Subject line>', ",
                 "        @Comment NVARCHAR(1000) = '<Required comments>', ",
                 "        @IsActive BIT = 1", 
                 "",
                 "SELECT @RptID = <RptID>",
                 "",
                 "INSERT INTO dbo.RptSubscription_Subscriptions", 
                 "            (RptID, ",      
                 "             SubscrType, ",      
                 "             PMCID, ",       
                 "             StartDate, ",      
                 "             EndDate, ",        
                 "             EmailTo, ",       
                 "             EmailCC, ",
                 "             EmailBCC, ",
                 "             Subject, ",
                 "             Usage, ",
                 "             Comment, ",
                 "             IsActive) ",
                 "VALUES",
                "       (@RptID, ",
                "        @SubscrType, ",
                "        @PMCID, ",
                "        NULL, ", 
                "        NULL, ", 
                "        @EmailTo, ",
                "        @EmailCC, ",
                "        @EmailBCC, ",
                "        @Subject, ",
                "        NULL, ",
                "        @Comment, ",
                "        @IsActive) ",
                "",
                "SELECT r.ReportName, s.*", 
                "FROM ScreeningReports.dbo.RptSubscription_Subscriptions s",
                "INNER JOIN ScreeningReports.dbo.RptSubscription_ReportName r ON r.RptID = s.RptID",
                "WHERE PMCID = @PMCID", 
                "ORDER BY SubscrID",
                "GO",
                ""
                ], 

        "description": "Used to insert new subscriptions"
    },

    "Create New Stored Procedure":{
        "prefix": "sqlCreateNewStoredProcedure",
        "body":["USE ${1:DBName}",
                "GO",
                "",
                "/*",
                " * DROP PROC dbo.${2:ProcName}",
                " */",
                "",
                "IF  EXISTS (SELECT *",
                "            FROM sys.procedures",
                "            WHERE object_id = OBJECT_ID('[dbo].${2:ProcName}') )",
                "BEGIN",
                "    DROP PROC dbo.${2:ProcName}",
                "    PRINT '<<< DROPPED PROC dbo.${2:ProcName} IN ' + db_name() + ' ON ' + @@servername + '  >>>'", 
                "END",
                "GO",
                "",
                "CREATE PROC dbo.${2:ProcName}",
                "AS", 
                "",
                "/*************************************************************************************************",
                " *  Object Type:               Stored Procedure",
                " *  Function:",
                " *  Created By:",
                " *  Create Date:",
                " *  Maintenance Log:",
                " *  Date          Modified By             Description",
                " *  ----------    --------------------    ---------------------------------------------------------",
                " **************************************************************************************************/",
                "BEGIN",
                "<Add SQL Statements>",
                "END",
                "GO",
                "",
                "IF EXISTS (SELECT 1",
                "           FROM sys.procedures",
                "           WHERE object_id = OBJECT_ID('[dbo].${2:ProcName}') )",
                "BEGIN",
                "    PRINT '<<< CREATED PROC dbo.${2:ProcName} IN ' + db_name() + ' ON ' + @@servername + '  >>>'",
                "END",
                "ELSE",
                "    PRINT '<<< FAILED CREATING PROC dbo.${2:ProcName} IN ' + db_name() + ' ON ' + @@servername + '  >>>'",
                "GO",
                ""],
        "description": "Used to create new stored procedures"
    },

    "Create New Function":{
        "prefix": "sqlCreateNewFunction",
        "body":["USE ${1:DBName}",
                "GO",
                "",
                "/*",
                " * DROP FUNCTION dbo.${2:FunctionName}",
                " */",
                "",
                "IF  EXISTS (SELECT *",
                "            FROM sys.objects",
                "            WHERE object_id = OBJECT_ID('[dbo].${2:FunctionName}') ", 
                "              AND type in ('AF','FN','FS','FT','IF','IS','TF'))",
                "BEGIN",
                "    DROP FUNCTION dbo.${2:FunctionName}",
                "    PRINT '<<< DROPPED FUNCTION dbo.${2:FunctionName} IN ' + db_name() + ' ON ' + @@servername + '  >>>'", 
                "END",
                "GO",
                "",
                "CREATE FUNCTION dbo.${2:FunctionName} (<parameter list>)",
                "RETURNS <return type> ", 
                "AS", 
                "",
                "/*************************************************************************************************",
                " *  Object Type:               Function",
                " *  Function:",
                " *  Created By:",
                " *  Create Date:",
                " *  Maintenance Log:",
                " *  Date          Modified By             Description",
                " *  ----------    --------------------    ---------------------------------------------------------",
                " **************************************************************************************************/",
                "BEGIN",
                "<Add SQL Statements>",
                "END",
                "GO",
                "",
                "IF EXISTS (SELECT 1",
                "           FROM sys.objects",
                "           WHERE object_id = OBJECT_ID('[dbo].${2:FunctionName}') ", 
                "             AND type in ('AF','FN','FS','FT','IF','IS','TF'))",
                "BEGIN",
                "    PRINT '<<< CREATED FUNCTION dbo.${2:FunctionName} IN ' + db_name() + ' ON ' + @@servername + '  >>>'",
                "END",
                "ELSE",
                "    PRINT '<<< FAILED CREATING FUNCTION dbo.${2:FunctionName} IN ' + db_name() + ' ON ' + @@servername + '  >>>'",
                "GO",
                ""],
        "description": "Used to create new functions"
    },

    "Create New Trigger":{
        "prefix": "sqlCreateNewTrigger",
        "body":["USE ${1:DBName}",
                "GO",
                "",
                "/*",
                " * DROP TRIGGER dbo.${2:TriggerName}",
                " */",
                "",
                "IF  EXISTS (SELECT *",
                "            FROM sys.triggers",
                "            WHERE object_id = OBJECT_ID('[dbo].${2:TriggerName}')) ", 
                "BEGIN",
                "    DROP TRIGGER dbo.${2:TriggerName}",
                "    PRINT '<<< DROPPED TRIGGER dbo.${2:TriggerName} IN ' + db_name() + ' ON ' + @@servername + '  >>>'", 
                "END",
                "GO",
                "",
                "CREATE TRIGGER dbo.${2:TriggerName} ON dbo.${3:TableName} FOR <INSERT>, UPDATE>, <DELETE>",
                "AS", 
                "",
                "/*************************************************************************************************",
                " *  Object Type:     Function",
                " *  Function:",
                " *  Created By:",
                " *  Create Date:",
                " *  Maintenance Log:",
                " *  Date          Modified By             Description",
                " *  ----------    --------------------    ---------------------------------------------------------",
                " **************************************************************************************************/",
                "BEGIN",
                "<Add SQL Statements>",
                "END",
                "GO",
                "",
                "IF EXISTS (SELECT 1",
                "           FROM sys.triggers",
                "           WHERE object_id = OBJECT_ID('[dbo].${2:TriggerName}')) ", 
                "BEGIN",
                "    PRINT '<<< CREATED TRIGGER dbo.${2:TriggerName} IN ' + db_name() + ' ON ' + @@servername + '  >>>'",
                "END",
                "ELSE",
                "    PRINT '<<< FAILED CREATING TRIGGER dbo.${2:TriggerName} IN ' + db_name() + ' ON ' + @@servername + '  >>>'",
                "GO",
                ""],
        "description": "Used to create new triggers"
    },

    "Criminal Search XML Extraction":{
        "prefix": "sqlSearchXMLExtraction",
        "body": [
            "INSERT ${3:DBName}.dbo.${1:InsertTableName} (",        
            "    SiteID,",
            "    AppID,", 
            "    CreateDate,",                                  
            "    SearchDate,",           
            "    OID,",
            "    JurisdictionName,",                            
            "    FullName,",
            "    FirstName,",
            "    MiddleName,",       
            "    LastName,",       
            "    DOB,",
            "    Gender,",
            "    OffenderNumber,",       
            "    Jurisdiction,",
            "    STATE,",
            "    DOBStart,",
            "    DOBEnd,",
            "    PhysicalDescription,",       
            "    FirstNameCode,",       
            "    MiddleNameCode,",       
            "    DOBCode,",
            "    SourceTable,",
            "    ProcessedLastName,",       
            "    OffenseID,",
            "    OffenseDate,",
            "    ChargeTypeCode,",
            "    OffenseDescription,",
            "    ORIC,",
            "    ArrestOnly,",
            "    OffenseDispositionInfo,",
            "    ManualOverride,",
            "    Code,",
            "    NonConviction,",
            "    NoDisposition,",
            "    DefDisposition)",
            "SELECT DISTINCT n.SiteID,",
            "    n.AppID,",
            "    n.CreateDate,",
            "    bd.SearchDate,",
            "    n.value('(../@OID)[1]', 'VARCHAR(50)') AS OID,",
            "    n.value('(../@JurisdictionName)[1]', 'VARCHAR(100)') AS JurisdictionName,",
            "    n.value('(../@FullName)[1]', 'VARCHAR(100)') AS FullName,",
            "    n.value('(../../@FirstName)[1]', 'varchar(50)') AS FirstName,",
            "    n.value('(../../@MiddleName)[1]', 'varchar(50)') AS MiddleName,",
            "    n.value('(../../@LastName)[1]', 'varchar(50)') AS LastName,",
            "    n.value('(../../@DOB)[1]', 'varchar(20)') AS DOB,",
            "    n.value('(../../@Gender)[1]', 'varchar(2)') AS Gender,",
            "    n.value('(../@Offender_Number)[1]', 'VARCHAR(100)') AS OffenderNumber,",
            "    n.value('(../@JursAbb)[1]', 'varchar(50)') AS Jurisdiction,",
            "    n.value('(../@STATE)[1]', 'VARCHAR(50)') AS STATE,",
            "    n.value('(../@DOBStart)[1]', 'VARCHAR(20)') AS DOBStart,",
            "    n.value('(../@DOBEnd)[1]', 'VARCHAR(20)') AS DOBEnd,",
            "    n.value('(../@Physical_Description)[1]', 'VARCHAR(300)') AS PhysicalDescription,",
            "    n.value('(../@FName_Code)[1]', 'varchar(50)') AS FirstNameCode,",
            "    n.value('(../@MName_Code)[1]', 'varchar(50)') AS MiddleNameCode,",
            "    n.value('(../@Dob_Code)[1]', 'varchar(50)') AS DOBCode,",
            "    n.value('(../@SourceTable)[1]', 'varchar(10)') AS SourceTable,",
            "    n.value('(../@ProcessedLastName)[1]', 'varchar(100)') AS ProcessedLastName,",
            "    n.value('(@Offense_ID)[1]', 'varchar(50)') AS OffenseID,",
            "    n.value('(@OffenseDate)[1]', 'varchar(30)') AS OffenseDate,",
            "    n.value('(@ChargeTypeCode)[1]', 'varchar(10)') AS ChargeTypeCode,",
            "    n.value('(@OffenseDesc)[1]', 'varchar(300)') AS OffenseDescription,",
            "    n.value('(@ORIC)[1]', 'varchar(300)') AS ORIC,",
            "    n.value('(@ArrestOnly)[1]', 'varchar(20)') AS ArrestOnly,",
            "    n.value('(@OffenseDispositionInfo)[1]', 'varchar(300)') AS OffenseDispositionInfo,",
            "    n.value('(@ManualOverride)[1]', 'varchar(10)') AS ManualOverride,",
            "    n.value('(@Code)[1]', 'varchar(10)') AS Code,",
            "    n.value('(@NonConviction)[1]', 'varchar(10)') AS NonConviction,",
            "    n.value('(@NoDisposition)[1]', 'varchar(10)') AS NoDisposition,",
            "    n.value('(@DefDisposition)[1]', 'varchar(10)') AS DefDisposition",
            "FROM ${3:DBName}.dbo.${2:BaseDataTableName} bd",
            "INNER JOIN ${3:DBName}.dbo.CriminalSearch_ScreeningXGXml n WITH (NOLOCK)",
            "    ON bd.SiteID = n.SiteID",
            "        AND bd.AppID = n.AppID",
            "CROSS APPLY n.RawXml.nodes('/CriminalSearchResult/OFFENDER/OFFENSE') AS h(n)",
            "WHERE n.Deleted = 0",
            "  AND n.ServiceName = 'Criminal'",
            "  AND n.SubService = 'Search'",
            " ",
            "GO",
            " "

        ],
        "description": "Template to use for criminal search xml extraction"

    }, 

    "Criminal Search Filter XML Extraction":{
        "prefix": "sqlSearchFilterXMLExtraction",
        "body": [
            "INSERT ${1:DBName}.dbo.${2:InsertTableName}(",
            "       SiteID,",
            "       AppID, ",
            "       SearchDate,",
            "       ServiceName,",
            "       SubService, ",
            "       Jurisdiction, ",
            "       OID, ",
            "       OffenseID, ",
            "       Reason)",
            "SELECT x.SiteID,",
            "       x.AppID,", 
            "       bd.SearchDate,", 
            "       x.ServiceName,", 
            "       x.SubService,",
            "       x.value('(@JursAbb)[1]', 'varchar(100)') AS Jurisdiction,",
            "       x.value('(@OID)[1]', 'varchar(100)') AS OID,", 
            "       x.value('(@Offense_ID)[1]', 'varchar(100)') AS OffenseID, ", 
            "       x.value('(@Reason)[1]', 'varchar(100)') AS Reason",
            "FROM ${1:DBName}.dbo.${3:BaseDataTableName} bd", 
            "INNER JOIN ${1:DBName}.dbo.${4:CriminalXMLTableName} x ON bd.SiteID = x.SiteID",
            "     AND bd.AppID = x.AppID",
            "CROSS APPLY x.FilterXml.nodes('/CriminalFilter/Filter') AS h(x)",   
            "WHERE x.ServiceName = 'Criminal'", 
            "  AND x.SubService = 'Search'", 
            "  AND x.Deleted = 0", 
            "GO",
            " "
        ], 
        "description": "Template to use for criminal search filter xml extraction"
    },

    "BCP Tables":{
        "prefix": "sqlBCPTables",
        "body": [
            "DECLARE @tablename varchar(200) = '<tablename>', ",
            "        @filelocation varchar(200) = '<filelocation>', " ,       
            "        @fromdb varchar(200) = '<fromdb>',",       
            "        @todb varchar(200) = '<todb>', ",       
            "        @cmd varchar(4000)",
            "",
            "select @cmd = 'bcp ' + @fromdb + '.dbo.' + @tableName + ' out ' + @filelocation + @tablename + '.bcp -S ' + @@SERVERNAME + ' -U one_1_audit -P employeeofthemonth -n'",
            "print @cmd",
            "exec xp_cmdshell @cmd",
            "",
            "select @cmd = 'bcp ' + @todb + '.dbo.' + @tableName + ' in ' + @filelocation + @tablename + '.bcp -S ' + @@servername + ' -U one_1_audit -P employeeofthemonth -n -E -b10000'",
            "print @cmd",
            "exec xp_cmdshell @cmd",
            "",
            "select @cmd = 'del ' + @filelocation + @tablename + '.bcp'",
            "print @cmd",
            "exec xp_cmdshell @cmd"
        ],
        "description": "Template to generate code to bcp tables"
    },
    "Extended Event Status": {
        "prefix":"sqlXEStatus",
        "body":[
        "SELECT ",
        "ES.name, ",
        "iif(RS.name IS NULL, 0, 1) AS running ",
          "FROM sys.dm_xe_sessions RS ",
          "RIGHT JOIN sys.server_event_sessions ES ON RS.name = ES.name ",
          "WHERE es.name = '%${1}%'"
        ],
        "description":"Show the status for any extended event"
        },
    
    "Update table statistics": {
        "prefix":"sqlUpdateStatistics",
        "body":["UPDATE STATISTICS ${1:SchemaName}.${2:TableName};",  
                "GO "
            ],
            "description":"Updates all the statistics on a table"
            },
            
    "Drop table if exists": {
        "prefix":"sqlDropTableIfExists",
        "body":[
            "IF EXISTS (SELECT 1 FROM sys.tables WHERE name = '${1:TableName}_Stage')"
            "BEGIN",
            "    DROP TABLE dbo.${1:TableName}_Stage",
            "END",
            "GO" ],
        "description":"Template for dropping a table if it exists."
    }
            
}